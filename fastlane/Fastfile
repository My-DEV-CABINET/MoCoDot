
# 환경 변수에서 키체인 이름과 비밀번호를 가져오기
KEYCHAIN_NAME = ENV["KEYCHAIN_NAME"]
KEYCHAIN_PASSWORD = ENV["KEYCHAIN_PASSWORD"]

app_identifier = CredentialsManager::AppfileConfig.try_fetch_value(:app_identifier)
api_key = lane_context[SharedValues::APP_STORE_CONNECT_API_KEY]

git_url = "git@github.com:My-iOS/MoCoDot-fastlane-certificate.git"

app_store_connect_api_key_id = ENV["APP_STORE_CONNECT_API_KEY_KEY_ID"]
app_store_connect_api_issuer_id = ENV["APP_STORE_CONNECT_API_KEY_ISSUER_ID"]
app_store_connect_api_p8_contents = ENV["APP_STORE_CONNECT_API_KEY_KEY"]

default_platform(:ios)

platform :ios do
  desc "Match Certs"
  lane :certs do |options|
    environment = "DEV"
    # 특정 환경이 인자로 전달되었는지 확인
    if options[:env]
      if options[:env].downcase == "release"
        environment = "Release"
      end
    end

    # Match 방식 사용 시 
    match(
      git_url: git_url,
      storage_mode: "git",
      type: "appstore",
      readonly: true,
    )
    
    match(
      git_url: git_url,
      storage_mode: "git",
      type: "development",
      readonly: true,
    )

    sync_code_signing(
      type: "appstore",
      app_identifier: ["com.Junwoo.Jununu.MoCoDot"],
      readonly: true
    )

  end

  desc "Set_keychain"
  lane :set_keychain do
    # Keychain 생성 또는 설정
    create_keychain(
      name: ENV["KEYCHAIN_NAME"],
      password: ENV["KEYCHAIN_PASSWORD"],
      default_keychain: true,
      unlock: true,
      timeout: 3600, # Keychain 자동 잠금이 일어나지 않도록 설정
      lock_when_sleeps: true
    )

  end

  desc "Run all the tests"
  lane :run_unit_tests do
    scan(
      scheme: "MoCoDot",
      clean: true,
      devices: ["iPhone 14 Pro"]
      )
    end

  #Gym/Build app
  desc "Build the app"
  lane :build do
    certs
    new_build_number = latest_testflight_build_number() + 1

    increment_build_number(
     build_number: new_build_number
     )
    
    #앱버전
    version_number = get_version_number(xcodeproj: "MoCoDot.xcodeproj", target: "MoCoDot")
    
    gym(scheme: "MoCoDot")
  end

  desc "Upload to TestFlight"
  lane :pilot_to_testflight do
    api_key = app_store_connect_api_key(
      key_id: app_store_connect_api_key_id,
      issuer_id: app_store_connect_api_issuer_id,
      key_content: app_store_connect_api_p8_contents, # 직접 문자열 또는 File.read로 파일 내용을 읽어옵니다.
      is_key_content_base64: true # .p8 파일 내용을 직접 전달하는 경우 false입니다.
    )
  
    pilot(api_key: api_key)
  end

  desc "git push with dynamic local and remote branch names"
lane :push_to_git_remote do |options|
  push_to_git_remote(
    remote: "origin",                    # 기본값: "origin"
    local_branch: options[:local_branch],  # 사용자 입력을 통해 받은 로컬 브랜치
    remote_branch: options[:remote_branch], # 사용자 입력을 통해 받은 리모트 브랜치
    force: true,                         # 기본값: false
    force_with_lease: true,              # 기본값: false
    tags: false,                         # 기본값: true
    no_verify: true,                     # 기본값: false
    set_upstream: true                   # 기본값: false
  )
end


  desc "App Store Upload"
  lane :app_store_upload do
    certs
    run_unit_tests
    build
    pilot_to_testflight

  end

end


